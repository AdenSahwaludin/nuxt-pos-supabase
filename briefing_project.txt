# Nuxt POS x Supabase (SBS) — Briefing Proyek

## Stack & Mode

- **Framework**: Nuxt 3, mode **CSR only** (Client-Side Rendering).
- **Database**: Supabase Postgres dengan **RLS (Row Level Security) aktif**, schema: `sbs` (terpapar).
- **Runtime**: Bun (untuk script dan development).
- **Roles**: `admin` dan `kasir`. UI untuk admin dan kasir **dipisahkan**.

## ID & Format

Format ID yang digunakan dalam sistem:

| Entitas     | Format ID                  |
|-------------|----------------------------|
| Pelanggan  | `P001…P999`               |
| Transaksi  | `INV-YYYY-MM-SEQ-<PEL>`   |
| Pembayaran | `PAY-YYYYMMDD-SEQ`        |
| Piutang    | `AR-YYYYMM-SEQ`           |

## Tabel Inti (Wajib, Sesuai Database)

Berikut adalah tabel utama yang harus diimplementasikan sesuai dengan database yang ada:

1. **pengguna** — Data staf toko dan role, di-map ke `auth.users` via `user_id`.
   - Field kunci: `id_pengguna`, `nama`, `email`, `telepon`, `role`, `terakhir_login`, audit time (`created_at`, `updated_at`).

2. **pelanggan** — Profil pelanggan dengan flag kredit.
   - Field kunci: `id_pelanggan`, `aktif`, `allow_installment`, `credit_limit`, `max_tenor_bulan`, `trust_score`, audit time.

3. **kategori** — Master data kategori produk.
   - Field kunci: `id_kategori`, `nama`, audit time.

4. **produk** — Katalog produk, terhubung ke kategori via `id_kategori`.
   - Field kunci: `id_produk`, `id_kategori`, `nama`, `harga`, `stok`, `batas_stok`, opsi pack/tier sederhana (`unit`, `pack_unit`, `pack_size`, `harga_pack`, `qty_tier1`, `harga_tier1`, `harga_tier_qty`, `harga_tier_pack`), audit time.

5. **transaksi** — Header penjualan, dengan awareness kredit.
   - Field kunci: `id_transaksi`, `id_pengguna`, `id_pelanggan`, `tanggal`, `status`, `total`, `diskon`/`pajak`/`ongkir`, **field kredit**: `is_credit`, `dp_amount`, `tenor_bulan`, `due_date`, `outstanding`, `ar_status`, audit time.

6. **transaksi_detail** — Detail item per transaksi.
   - Field kunci: `id_detail`, `id_transaksi`, `id_produk`, `jumlah`, `harga_satuan`, `subtotal`.

7. **piutang** — Header Accounts Receivable (AR) tanpa tabel jadwal terpisah; jadwal disimpan ringkas di `jadwal` (JSON array).
   - Field kunci: `id_piutang`, `id_transaksi` (unik), `id_pelanggan`, `tenor_bulan`, `dp_amount`, `principal`, `bunga_persen`, `total_tagihan`, `outstanding`, `start_date`/`end_date`, `jadwal` (JSON), `status`, `approved_by`, audit time.

8. **pembayaran** — Catatan pembayaran; dapat dialokasikan ke piutang + termin jika kredit.
   - Field kunci: `id_pembayaran`, `id_transaksi`, `metode`, `jumlah`, `tanggal`, opsional `id_piutang`, `termin_ke`.

## Flow POS (Tanpa Opsi, Lurus)

Proses POS yang sederhana dan langsung:

- **Cari Produk**: Berdasarkan barcode atau nama, dengan paginasi 20–50 item.
- **Keranjang**: Hitung harga berdasarkan dasar, tier, atau pack.
- **Checkout**:
  - **Tunai/Non-Tunai**: Buat `transaksi` + `transaksi_detail` → buat `pembayaran` → set `status = selesai`.
  - **Cicilan**: Buat `transaksi` (`is_credit = TRUE`) → hitung `principal` & `total_tagihan` → buat `piutang` dengan `jadwal` (JSON bulanan) → catat DP di `pembayaran` (link ke `id_piutang`, `termin_ke = 0/DP`) → set `outstanding = total_tagihan` → `status = selesai`.
- **Pembayaran Angsuran Berikutnya**: Insert ke `pembayaran` dengan `id_piutang` + `termin_ke` terkait, update `outstanding`.

## Eligibility Cicilan (Smart, Fixed)

Sistem untuk menentukan kelayakan cicilan:

- Prioritas **override pelanggan** (`allow_installment`, `credit_limit`, `max_tenor_bulan`, min DP via aturan internal).
- Jika tidak ada, gunakan **kebijakan global** (umur akun, riwayat belanja 3 bulan, frekuensi, tunggakan, `trust_score`, min DP, max tenor).
- Tampilkan alasan tolak atau terima secara jelas di UI.

## UI Minimal (Wajib)

Antarmuka pengguna yang minimal:

- **Admin**: CRUD untuk produk, kategori, pelanggan; set kebijakan kredit (global & per pelanggan); monitor piutang/outstanding, stok.
- **Kasir**: Scan/cari produk, keranjang, pilih metode bayar, opsi cicilan (cek eligibility), ringkasan transaksi.

## Keamanan

Pengaturan keamanan:

- Schema `sbs` terpapar; role `anon`/`authenticated` memiliki **USAGE schema** + **SELECT** (untuk dev).
- **RLS aktif** di semua tabel.
- **Read** di produksi: **authenticated only**.
- **Write**: `admin` untuk master data; `kasir`/`admin` untuk transaksi & pembayaran.
- Audit: `created_at`/`updated_at`, `terakhir_login`.

## Performa

Optimisasi performa:

- Selalu gunakan paginasi, pilih kolom spesifik (hindari `*`).
- Debounce search (~250ms), virtual list untuk katalog besar.
- Cache master data (kategori/kebijakan) di client, lazy-load gambar.
- Hindari heavy render; tetap **CSR** ringan.

## Acceptance (Fase 1)

Kriteria penerimaan untuk fase pertama:

- Login & redirect berdasarkan role; layout admin/kasir siap.
- POS **tunai/non-tunai** berfungsi (transaksi, detail, pembayaran, status).
- **Cicilan** berfungsi: eligibility, piutang (JSON `jadwal`), DP tercatat, `outstanding` terupdate.
- Paginasi + performa baik; RLS aktif; akses role sesuai.

## Catatan Implementasi

Catatan tambahan untuk implementasi:

- Generator ID di client (Bun/Nuxt) harus konsisten dengan format di atas.
- Semua query ke `sbs.*` dengan paginasi dan filter yang efisien.
- Tidak ada tabel jadwal terpisah; **jadwal angsuran disimpan di `piutang.jadwal` (JSON array)** dan digunakan UI untuk render & pembayaran termin.
## Catatan Lingkungan
- Menggunakan Nuxt 4 (bukan Nuxt 3); beberapa plugin dan komponen mungkin perlu penyesuaian untuk menghindari error.
- Runtime: Bun
- Yang sering salah di bagian "~~/lib/supabaseClient"; (ini yang benar) kadang menulisnya "~/lib/supabaseClient";.
